# Python standard library
from os.path import join
from os import listdir
import os, sys, json

# 3rd party imports from pypi
from snakemake.workflow import workflow as wf_api
from snakemake.utils import R
import git

# Local imports
from scripts.common import (
    allocated,
    provided, 
    references,
    str_bool
)


# Global workflow variables
configfile: "config.json"
samples  = config['samples']
workpath = config['project']['workpath']
tmpdir = config['options']['tmp_dir']
genome = config['options']['genome']         # Reference genome of a set of samples
chip_peaks = config['options']['chip_peaks'] # Peak calls from ChIP experiment
groupdata = config['project']['groups']

groups = list(groupdata.keys())

if not os.path.isdir("HiChIPtools"):
    git.Repo.clone_from("https://github.com/dovetail-genomics/HiChiP.git", "HiChIPtools")

# Read in resource information,
# containing information about 
# threads, mem, walltimes, etc.
# TODO: Add handler for when the
# mode is set to local.
with open(join('config', 'cluster.json')) as fh:
    cluster = json.load(fh)


# Final ouput files of the pipeline
rule all:
    input:
        expand(join(workpath,"fastQC","{name}.R1_fastqc.html"), name=samples),
        expand(join(workpath,"QC","{name}.dedupStatsSimplify.txt"), name=samples),
        expand(join(workpath,"QC","{name}.hichip_qc_metrics.txt"), name=samples),
        expand(join(workpath,"Aligned","{name}.hic"), name=samples),
        expand(join(workpath,"FitHiChIP_out","{name}","Summary_results_FitHiChIP.html"),name=samples),
	expand(join(workpath,"AlignedReps","{group}.mapped.pairs"), group=groups),
        expand(join(workpath,"AlignedReps","{group}.hic"), group=groups),
        expand(join(workpath,"AlignedReps","HicProIn","{group}","{group}.hicpro_mapped.pairs.gz"),group=groups),

rule fastqc:
    """
    Quality-control step to assess sequencing quality of the raw data prior removing
    adapter sequences. FastQC generates a set of basic statistics to identify problems
    that can arise during sequencing or library preparation.
    @Input:
        FastQ files (scatter)
    @Output:
        FastQC reports and zip file containing data quality information
    """
    input:
        R1=join(workpath,"{name}.R1.fastq.gz"),
        R2=join(workpath,"{name}.R2.fastq.gz"),
    output:
        join(workpath,'fastQC',"{name}.R1_fastqc.html"),
        join(workpath,'fastQC',"{name}.R2_fastqc.html"),
    params:
        rname='fastqc',
        outdir=join(workpath,"fastQC"),
        tmpdir=tmpdir,
    envmodules: 
        config['tools']['fastqc']
    threads:
        int(allocated("threads", "fastqc", cluster))
    shell: """
    # Setups temporary directory for
    # intermediate files with built-in 
    # mechanism for deletion on exit
    if [ ! -d "{params.tmpdir}" ]; then mkdir -p "{params.tmpdir}"; fi
    tmp=$(mktemp -d -p "{params.tmpdir}")
    trap 'rm -rf "${{tmp}}"' EXIT

    # Running fastqc with local
    # disk or a tmpdir, fastqc
    # has been observed to lock
    # up gpfs filesystems, adding
    # this on request by HPC staff.
    fastqc \\
        {input.R1} {input.R2} \\
        -t {threads} \\
        -o "${{tmp}}"

    # Copy output files from tmpdir
    # to output directory
    find "${{tmp}}" \\
        -type f \\
        \\( -name '*.html' -o -name '*.zip' \\) \\
        -exec cp {{}} {params.outdir} \\;
    """

rule align:
    input:
        R1=join(workpath,"{name}.R1.fastq.gz"),
        R2=join(workpath,"{name}.R2.fastq.gz"),
    output:
        DedupStats=join(workpath,"QC","{name}.dedupStats.txt"),
	Pairs=join(workpath,"Aligned","{name}.mapped.pairs"),
        bam=join(workpath,"Aligned","{name}.mappedPE.bam"),
	dedupsam=join(workpath,"Aligned","{name}.dedup.pairsam.gz"),
    params:
        rname='align',
        bwaref=config['references'][genome]['bwa'],
	reflen=config['references'][genome]['reflen'],
        tmpdir=tmpdir,
        sample="{name}",
        dedupsam=join(workpath,"Aligned","{name}.dedup.pairsam"),
    envmodules:
        config['tools']['bwa'],
        config['tools']['pairtools'],
        config['tools']['samtools'],
    threads:
        int(allocated("threads", "align", cluster))
    shell: """

    # Setups temporary directory for
    # intermediate files with built-in 
    # mechanism for deletion on exit
    if [ ! -d "{params.tmpdir}" ]; then mkdir -p "{params.tmpdir}"; fi
    tmp=$(mktemp -d -p "{params.tmpdir}")
    trap 'rm -rf "${{tmp}}"' EXIT

    bwa mem -5SP -T0 -t{threads} {params.bwaref} {input.R1} {input.R2} \\
            -o ${{tmp}}/{params.sample}.aligned.sam

    pairtools parse --min-mapq 40 --walks-policy 5unique --max-inter-align-gap 30 \\
          --nproc-in {threads} --nproc-out {threads} --chroms-path {params.reflen} \\
          ${{tmp}}/{params.sample}.aligned.sam > ${{tmp}}/{params.sample}.parsed.pairsam

    rm ${{tmp}}/{params.sample}.aligned.sam

    pairtools sort --nproc {threads} --tmpdir=${{tmp}} \\
          ${{tmp}}/{params.sample}.parsed.pairsam > ${{tmp}}/{params.sample}.sorted.pairsam

    rm ${{tmp}}/{params.sample}.parsed.pairsam

    pairtools dedup --nproc-in {threads} --nproc-out {threads} --mark-dups \\
         --output-stats {output.DedupStats} \\
         --output {params.dedupsam} ${{tmp}}/{params.sample}.sorted.pairsam

    rm ${{tmp}}/{params.sample}.sorted.pairsam

    pairtools split --nproc-in {threads} --nproc-out {threads} --output-pairs {output.Pairs} \\
         --output-sam ${{tmp}}/{params.sample}.unsorted.bam {params.dedupsam}

    gzip {params.dedupsam}

    samtools sort -@{threads} -T ${{tmp}}/{params.sample}.tmp.bam \\
         -o {output.bam} ${{tmp}}/{params.sample}.unsorted.bam

    samtools index {output.bam}
    """

rule QC:
   """
   Required packages: argparse, tabulate
   """
   input:
       join(workpath,"QC","{name}.dedupStats.txt"),
   output:
       join(workpath,"QC","{name}.dedupStatsSimplify.txt"),
   params:
       rname='QC',
       script=join(workpath,"HiChIPtools","get_qc.py"),
   shell: """
   python3 {params.script} -p {input} > {output}
   """

rule peakQC:
   """
   Required linux packages: getopts
   Required python packages: argparse, pysam, numpy, pandas, tabulate, matplotlib, subprocess
   """
   input:
      join(workpath,"Aligned","{name}.mappedPE.bam"),
   output:
      txt=join(workpath,"QC","{name}.hichip_qc_metrics.txt"),
      png=join(workpath,"QC","{name}.enrichment_QC.png")
   params:
      rname='peakQC',
      reflen=config['references'][genome]['reflen'],
      sample="{name}",
      bed=chip_peaks,
      tmpdir=tmpdir,
   envmodules:
      config['tools']['bedtools'],
      config['tools']['samtools']
   threads:
           int(allocated("threads", "peakQC", cluster))
   shell: """
    # Setups temporary directory for
    # intermediate files with built-in 
    # mechanism for deletion on exit
    if [ ! -d "{params.tmpdir}" ]; then mkdir -p "{params.tmpdir}"; fi
    tmp=$(mktemp -d -p "{params.tmpdir}")
    trap 'rm -rf "${{tmp}}"' EXIT

   grep --color=never '^#\|^chr[1-9]\\b\\|^chr1[0-9]\\b\\|^chr2[0-2]\\b\\|^chr[X,Y,M]\\b' {params.bed} > ${{tmp}}/tmp.bed
   chmod +x {workpath}/HiChIPtools/enrichment_stats.sh
   {workpath}/HiChIPtools/enrichment_stats.sh -g {params.reflen} -b {input} \
                  -p ${{tmp}}/tmp.bed -t {threads} -x ${{tmp}}/{params.sample}
   mv ${{tmp}}/{params.sample}_hichip_qc_metrics.txt {output.txt}

   if [[ {params.bed} =~ (.*).narrowPeak ]]; then
       python3 {workpath}/HiChIPtools/plot_chip_enrichment.py -bam {input} \
                  -peaks ${{tmp}}/tmp.bed -output {output.png}
   else
       python3 {workpath}/HiChIPtools/plot_chip_enrichment_bed.py -bam {input} \
                  -peaks ${{tmp}}/tmp.bed -output {output.png} 
   fi
   """

rule contactmap:
   input:
      join(workpath,"{alignDir}","{name}.mapped.pairs"),
   output:
      join(workpath,"{alignDir}","{name}.hic"),
   params:
      rname='contactmap',
      reflen=config['references'][genome]['reflen'],
      memory=max(int(allocated("mem", "contactmap", cluster).lower().strip('g') ) - 2, 2) * 1000,
   envmodules:
      config['tools']['juicer'],
   threads:
      max(int(allocated("threads", "contactmap", cluster)) -2, 2)
   shell: """
   juicer_tools -Xmx{params.memory}m pre --threads {threads} {input} {output} {params.reflen}
   """

rule makehicpro:
   input:
      join(workpath,"{alignDir}","{name}.mapped.pairs"),
   output:
      join(workpath,"{alignDir}","HicProIn","{name}","{name}.hicpro_mapped.pairs.gz"),
   params:
      rname='makehicpro',
   shell: """
   grep -v '#' {input} | awk -F"\t" '{{print $1"\t"$2"\t"$3"\t"$6"\t"$4"\t"$5"\t"$7}}' | gzip -c > {output}
   """

rule makeFitConfig:
   input:
      join(workpath,"Aligned","HicProIn","{name}","{name}.hicpro_mapped.pairs.gz"),
   output:
      join(workpath,"FitHiChIP_out","{name}.config"),
   params:
      rname='makeFitConfig',
      inConfig=join(workpath,"config","configfile_BiasCorrection_CoverageBias"),
      reflen=config['references'][genome]['reflen'],
      outdir=join(workpath,"FitHiChIP_out","{name}"),
      bed=chip_peaks,
      sample="{name}",
      CTCF="true",
   shell: """
     cp {params.inConfig} {output}
     sed -i 's@ValidPairs=.*@ValidPairs={input}@g' {output}   
     sed -i 's@PeakFile=.*@PeakFile={params.bed}@g' {output}
     sed -i 's@OutDir=.*@OutDir={params.outdir}@g' {output}
     sed -i 's@ChrSizeFile=.*@ChrSizeFile={params.reflen}@g' {output}
     sed -i 's@PREFIX=.*@PREFIX={params.sample}@g' {output}

     if ! {params.CTCF}; then
        sed -i 's@IntType=.*@IntType=3@g' {output}
        sed -i 's@LowDistThr=.*@LowDistThr=10000@g' {output}
     fi
   """

rule FitHiChIP:
   input:
      pairs=join(workpath,"Aligned","HicProIn","{name}","{name}.hicpro_mapped.pairs.gz"),
      config=join(workpath,"FitHiChIP_out","{name}.config"),
   output:
      join(workpath,"FitHiChIP_out","{name}","Summary_results_FitHiChIP.html"),
   params:
      rname='FitHiChIP',
      runDir=join(workpath,"FitHiChIP"),
   envmodules:
      config['tools']['fithichip'],
   shell: """
     if [ ! -d "{params.runDir}" ]; then
       mkdir {params.runDir}
       cp -r $FITHICHIP_SRC/* {params.runDir}
     fi

     cd {params.runDir}
     ./FitHiChIP_HiCPro.sh -C {input.config}
   """


rule unzip:
    input:
       join(workpath,"Aligned","{name}.dedup.pairsam.gz")
    output:
       temp(join(workpath,"Aligned","{name}.dedup.pairsam"))
    params:
       rname='unzip'
    shell: """
       gunzip -k {input}
    """

rule mergeReps:
    input:
        pairsam=lambda w: expand(join(workpath,"Aligned","{name}.dedup.pairsam"), name=groupdata[w.group]),
    output:
        Pairs= join(workpath, "AlignedReps","{group}.mapped.pairs"),
    params:
        rname='mergeReps',
        tmpdir=tmpdir,
        sample="{group}",
    envmodules:
        config['tools']['pairtools'],
    threads:
        int(allocated("threads", "mergeReps", cluster))
    shell: """

    # Setups temporary directory for
    # intermediate files with built-in 
    # mechanism for deletion on exit
    if [ ! -d "{params.tmpdir}" ]; then mkdir -p "{params.tmpdir}"; fi
    tmp=$(mktemp -d -p "{params.tmpdir}")
    trap 'rm -rf "${{tmp}}"' EXIT

    pairtools merge -o ${{tmp}}/{params.sample}.dedup.pairsam {input.pairsam}
    
    pairtools split --nproc-in {threads} --nproc-out {threads} --output-pairs {output.Pairs} \\
         --output-sam ${{tmp}}/{params.sample}.unsorted.bam ${{tmp}}/{params.sample}.dedup.pairsam
    """



# Import rules 
include: join("rules", "common.smk")
include: join("rules", "hooks.smk")